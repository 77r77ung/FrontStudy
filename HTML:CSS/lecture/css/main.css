/* Tip) 모든 div 요소에 자동으로 border-box를 적용시킴. */
div {
    box-sizing: border-box;
}

body {
    margin: 0px;
}

/* 브라우저 사이의 호환성 문제를 해결: normalize.css 
    적용방법 1. 구글링 -> css 파일 상단에 붙여넣기 
    적용방법 2. 구글링 -> html 링크로 연결*/

.profile {
    width: 100px;
    display: block;
    margin-left: auto;
    margin-right: auto;
}

.box {
    background-color: #1C3561;
    margin: 10px;
    padding: 40px;
    border: 4px solid black;
    border-radius: 5px;
    display: block;
    margin-left: auto;
    margin-right: auto;
    /* 숙제 2. <div> 박스에 shadow 적용해보기 */
    box-shadow: 5px 5px 5px 5px gray;
}

.box2 {
    background-color: #427CE0;;
    margin: 10px;
    padding: 40px;
    border: 4px solid black;
    border-radius: 5px;
    display: block;
    margin-left: auto;
    margin-right: auto;
    box-shadow: 5px 5px 5px 5px gray;
    text-align: right;
}

.container {
    width: 800px;
}

.header {
    /* width: 100% -> 내 상위요소(:부모) 태그 width의 100%로 설정
        부모 요소 => container */
    width: 100%;
    height: 50px;
    background: aquamarine;
}

.left-menu {
    width: 20%;
    height: 400px;
    background: cornflowerblue;
    /* float: 박스들을 가로 배치할 때 사용
    float: left; -> 요소를 공중에 띄워서 왼쪽으로 정렬
    float: right;d 를 적용시켜도 동일한 결과가 나옴 */
    /* float: left; */
    /* display:block; => 한 행을 전부 차지
       display:inline-block; => 자기 크기만큼 차지 */
    display:inline-block;
    vertical-align: top;
}

.right {
    width: 80%;
    height: 400px;
    background: coral;
    /* float: left; */
    display:inline-block;
}

.footer {
    width: 100%;
    height: 100px;
    background-color: grey;
    /* float의 성질(공중에 뜨는 성질)로 인해 float 다음에 오는 요소가 가려지는(보이지 않는) 현상을 해결할 수 있음
        clear: left; -> float:left; 해결
        clear: right; -> float:right; 해결
        clear: both; -> float:left; & float: right; 모두 해결 */
    /* clear: both; */
}

.box3 {
    display: block;
    margin-left: auto;
    margin-right: auto;
    background-color: #1C3561;
    margin: 10px;
    padding: 40px;
    border: 4px solid black;
    border-radius: 5px;
}

.main-background {
    width: 100%;
    height: 500px;
    /* 배경 이미지 여러개 겹치는 방법 => background0image: url(), url() */
    background-image: url(../img/shoes.jpeg);
    background-size: 100%;
    /* 배경 이미지는 해당 넓이 혹은 높이에 꽉 차지 않으면 바둑판 형식으로 반복됨.
        background-repeat: no-repeat -> 반복되는 것을 방지해줌. */
    background-repeat: no-repeat;
    /* cover: 배경 이미지가 잘려도 상관없으니 빈 공간 없이 배경 이미지를 해당 div에 꽉 채움.
        contain: div에 여백이 생겨도 상관없으니 배경 이미지가 잘리지 않도록 해줌. */
    background-size:cover;
    /* 배경 위치 조절 */
    background-position: center;
    /* 스크롤 시 배경 위치를 조정 -> 추가 조사 필요 
    background-attachment: fixed; */
    /* 배경 이미지 필터 조절 -> 배경 이미지 div 안에 글자가 있으면 글씨에도 해당 필터가 그대로 적용됨.
    filter: brightness(70%) */
    /* div 박스 테두리 떨어트리기 */
    padding: 1px;
    text-align: center;
    position: relative;
}

.main-title {
    color: white;
    font-size: 40px;
    /* margin collapse 현상
        div 박스 2개의 테두리가 겹치면 margin이 하나로 합쳐지는 현상임.
        따라서, h4에 margin-top을 주면 main-background에 margin-top을 적용시킨 것과 동일하게 나타남.

        -> 테두리가 붙지 않게 설정해 해결함.

        만약, 테두리가 붙어있는 div 박스1과 div 박스2 모두 margin이 적용되어 있다면?
        (ex. div1 -> margin-bottom: 50px div2 -> margin-top: 30px)
        원래라면 div1과 div2 사이의 여백이 80px만큼 적용되어야 하지만
        div1의 bottom과 div2의 top이 붙어있어 여백이 50px만큼 생성된다.
    */
    margin-top: 200px;
}

.main-content {
    color: white;
    font-size: 20px;
    margin-top: 50px;
    margin-bottom: 50px;;
}

.main-button {
    padding: 15px;
    font-size: 20px;
    background-color: white;
    border: none;
    border-radius: 5px;
    /* 좌표 속성으로 배치하는 방법 => position
        - position: releative; 꼭 써야 함.
            => 기준점 | 내 원래 위치를 기준으로 이동하라는 뜻임.
        - position: static; 좌표 이동을 하지 않음.
        - position: fixed; 현재 화면이 기준점이 됨.
            현재 화면을 기준으로 고정되는 요소가 필요할 때 사용함.
        - position: absolute; 내 부모 태그가 기준점이 됨.
            부모 태그가 기준점이 되려면 해당 태그가 position: relative;를 가지고 있어야 함.
        - top, right, left, bottom
        - -이동이 가능함.
        - 공중에 뜨는 성질이 있음. */
    position:absolute;
    left: 0;
    right: 0;
    margin: auto;
    width: 150px;
}

/* position: absolute가 있는 요소를 가운데 정렬하려면
    position: absolute;
    left: 0;
    right: 0;
    margin: auto;
    width: 는 존재하기만 하면 됨(값 상관 x) */

.sub{
    background-color: #eee;
    text-align: center;
    margin: auto;
    /* max-width
        반응형 웹페이지를 만들고 싶을 땐 %를 사용하면 됨.
        하지만 width %의 문제는 pc 화면에서는 요소가 너무 커짐.
        +) min-width / max-hight 등등도 있음. 
        
        !!width는 content 영역의 너비를 의미함.
            - padding, border은 width와 상관없음.
        따라서, 코드 상 width는 500px이지만 padding이 50px씩 들어가면 실제 화면에 보여지는 width는 600px이 됨.
        -> 요소 크기 제단이 어려워짐.
        해결 방안) width에 content뿐만 아니라 padding, border도 포함시켜줌.
                 box-sizing: border-box;
            <-> content-box; content만 포함시킴.*/
    box-sizing: border-box;
    width: 80%;
    max-width: 600px;
    /* position:absolute;
    left: 0;
    right: 0;
    padding: 10px;
    bottom: -130px; */
    position: relative;
    top: -40px;
    padding: 20px;
    /* z-index: 정수
        공중에 떠있는 요소들의 앞뒤 순서를 정해줌.
        정수가 높을 수록 앞에 옴. */
    z-index: 5;
}

.text-input {
    padding: 10px;
    font-size: 20px;
    border: 2px solid red;
    border-radius: 5px;
}

/* 
모든 input에 아래의 스타일이 적용됨.
input {
    padding: 10px;
    font-size: 20px;
    border: 2px solid red;
    border-radius: 5px;
}

type이 text인 input만 해당 스타일이 적용됨.
input[type=text]{
    padding: 10px;
    font-size: 20px;
    border: 2px solid red;
    border-radius: 5px;
}
*/